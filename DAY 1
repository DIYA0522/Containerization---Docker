Docker = the most popular containerization tool, used in DevOps to build, ship, and run applications consistently across environments.

Docker is a tool/platform that makes containerization easy.
  It lets you package an application and everything it needs (dependencies, libraries, configs) into a container.
  you can run that container anywhere â€” your laptop, a server, or the cloud â€” and it will behave the same way.

Install Docker

sudo apt update
sudo apt install docker.io -y
sudo systemctl start docker
sudo systemctl enable docker                       --telling systemd (command to manage services on Linux) to start Docker automatically on system boot.
docker --version

Run Your First Container

Test Docker installation:
docker run hello-world                             --Prints a message, exits
This pulls a small image and prints a welcome message.

See Containers
docker ps        # running containers
docker ps -a     # all containers (including stopped)

Containers vs Images

Image = blueprint/template (read-only).
Container = running instance of an image.

docker images    # list images
docker run -it ubuntu bash   # run Ubuntu in interactive shell            --Starts Ubuntu shell, Works inside a container

Inside Ubuntu, run:
ls
pwd
exit   # to quit container

Add your user to the Docker group (recommended)
   sudo usermod -aG docker $USER

Log out + log in or 
Refresh group membership without logging out  
  newgrp docker



-----------------------
Use 
docker run -it ubuntu bash 
whenever you need a playground Ubuntu environment (to learn, debug, or test things) without affecting your real system.

docker run â†’ start a new container.

-it â†’ two flags combined:
 -i = interactive (keeps STDIN open so you can type commands)
 -t = allocate a terminal (gives you a shell-like experience)
ubuntu â†’ the image to use (here, official Ubuntu OS image).
bash â†’ the command to run inside the container (Ubuntuâ€™s shell).

ðŸ‘‰ This starts a temporary Ubuntu container and drops you directly inside a bash shell.

List all images you have:
   docker images

Remove a container (after itâ€™s stopped):
   docker rm <container_id>                  --take container_id from docker ps -a 

Remove an image (cleanup):
   docker rmi <image_id>                     --take image_id from docker images

Check Docker system info:
   docker info

If you want to clean everything unused
   docker system prune

