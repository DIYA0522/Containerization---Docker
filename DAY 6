üß± What is Docker Compose?

Docker Compose is a tool that helps you define and run multi-container applications using a single YAML file (docker-compose.yml).

‚úÖ Instead of running many docker run commands manually,
you can describe everything (images, ports, networks, environment variables, etc.) in one file, and just run:

docker-compose up -d

Install
sudo apt install docker-compose -y
docker-compose --version

Create
mkdir ~/compose-demo
cd ~/compose-demo
Then create the YAML file:

nano docker-compose.yml
--------------
version: "3"

services:
  web:
    image: nginx
    ports:
      - "8080:80"

  db:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
---------------
Takeaway:
web is for serving HTTP traffic externally.
db is internal, and other services (like web) can communicate with it inside the Compose network.

Run your stack
docker-compose up -d

Check running services:
docker-compose ps

‚úÖ You‚Äôll see 2 containers:

compose-demo_web_1 (nginx)
compose-demo_db_1 (mysql)

Test

In your browser, go to:
http://<your-ec2-public-ip>:8080

Scale your service

Want 3 Nginx containers instead of 1?

Run:
docker-compose up --scale web=3 -d

Now check again:
docker-compose ps

Stop and remove everything

To stop containers:
docker-compose down

It removes all containers, but your data persists if volumes are defined.

Note: 
I can explain when to NOT use -d ‚Äî like when you actually want to watch logs interactively.
       In Compose:
docker-compose up -d
Without -d, Compose attaches logs from all services to your terminal.
With -d, Compose runs all services in the background and you can keep using the terminal.

--------------------------------------------------------------
Q> In this Compose file, if you run docker-compose up -d, how many containers will be created and on what network?

‚úÖ Your Answer:

2 containers ‚Äî Nginx and MySQL.
Network not defined ‚Üí Docker creates a default network.

üíØ Absolutely right.

Docker Compose will automatically:
Create one network (named after your folder, e.g. myproject_default).
Run two containers, one for each service (web, db).
Attach both containers to that same network so they can communicate by name.


Q. Why do we write ports: - "8080:80" under web but not for db?

We write ports: - "8080:80" under web because:

Web (Nginx) serves HTTP traffic externally ‚Äî we want to access it from our browser or host.
Port mapping connects host port 8080 ‚Üí container port 80, so when we open http://<EC2-IP>:8080, traffic goes to Nginx inside the container.
Database (MySQL) is internal-only ‚Äî it doesn‚Äôt need to be exposed to the internet. Other containers (like web) can access it internally over the Docker network using its service name db.

Q. True or False:
Containers from the same Docker Compose project can communicate using their service names (e.g., db, web) without any extra configuration.

When Docker Compose runs, it automatically creates a default bridge network for that project.
All containers (services) in the Compose file are attached to that same network.
Because of this, they can communicate with each other using their service names as hostnames ‚Äî e.g. mysql -h db -u root -p.

Q: If you remove the stack using docker-compose down, what happens to the network and volumes by default?

üü° By default:

The containers are stopped and removed ‚úÖ
The default network created by Compose is also removed ‚úÖ
Volumes remain (persist) ‚ùó

Q. You want to run 3 instances of your web service.
What command would you use?
docker-compose up --scale web=3 -d


