Working with Containers

1. Start / Stop / Remove containers

Run an Ubuntu container:
  docker run -it ubuntu bash
Exit with exit â†’ container is stopped.

Start a stopped container:
  docker start -ai <container_id>
(-a = attach, -i = interactive)

Stop a running container:
docker stop <container_id>

Remove a container:
docker rm <container_id>

ðŸ‘‰ Practice: run docker ps -a after each step to see the status.

2. Detached Mode

Run Nginx in the background:
  docker run -d --name mynginx -p 8080:80 nginx
(-d = detached, so it runs in background; -p maps container port 80 â†’ host port 8080).

    ðŸ”¹ Breakdown:
-d â†’ detached mode (background)
--name mynginx â†’ name your container mynginx
-p 8080:80 â†’ map host port 8080 â†’ container port 80                   ---Exposing ports (you fixed the syntax: -p 8080:80)
nginx â†’ image name

Check running containers:
  docker ps

ðŸ‘‰ Open http://<EC2-public-IP>:8080 in browser (or curl localhost:8080).

Logs & Exec

View logs of a container:
  docker logs mynginx

Execute a command inside a running container:
  docker exec -it mynginx bash

Now youâ€™re inside the Nginx container â†’ check files:
ls /usr/share/nginx/html

Exit with exit.

If container in status created-- it means its stuck it got never started in the first place, so do docker start and then docker stop, 
then rm, to remove if reqd

MEMORY RUN --> Commands to match:

Create & Run â†’ docker run
List running â†’ docker ps
List all (incl. stopped) â†’ docker ps -a
Stop â†’ docker stop <container_id>
Start again â†’ docker start <container_id>
Remove â†’ docker rm <container_id>
Remove image â†’ docker rmi <image_id>








